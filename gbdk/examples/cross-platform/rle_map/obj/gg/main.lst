                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.2 #13350 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl b___func_map_compressed
                                     13 	.globl ___func_map_compressed
                                     14 	.globl b___func_map_tiles
                                     15 	.globl ___func_map_tiles
                                     16 	.globl _rle_decompress
                                     17 	.globl _rle_init
                                     18 	.globl _set_tile_map_compat
                                     19 	.globl _set_tile_2bpp_data
                                     20 	.globl _wait_vbl_done
                                     21 	.globl _datapos
                                     22 	.globl _scrollpos
                                     23 	.globl _data
                                     24 ;--------------------------------------------------------
                                     25 ; special function registers
                                     26 ;--------------------------------------------------------
                           00003E    27 _MEMORY_CTL	=	0x003e
                           00003F    28 _JOY_CTL	=	0x003f
                           00007E    29 _VCOUNTER	=	0x007e
                           00007F    30 _PSG	=	0x007f
                           00007F    31 _HCOUNTER	=	0x007f
                           0000BE    32 _VDP_DATA	=	0x00be
                           0000BF    33 _VDP_CMD	=	0x00bf
                           0000BF    34 _VDP_STATUS	=	0x00bf
                           0000DC    35 _JOY_PORT1	=	0x00dc
                           0000DD    36 _JOY_PORT2	=	0x00dd
                           0000F0    37 _FMADDRESS	=	0x00f0
                           0000F1    38 _FMDATA	=	0x00f1
                           0000F2    39 _AUDIOCTRL	=	0x00f2
                                     40 ;--------------------------------------------------------
                                     41 ; ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area _DATA
                           00FFFC    44 _RAM_CONTROL	=	0xfffc
                           00FFF8    45 _GLASSES_3D	=	0xfff8
                           00FFFD    46 _MAP_FRAME0	=	0xfffd
                           00FFFE    47 _MAP_FRAME1	=	0xfffe
                           00FFFF    48 _MAP_FRAME2	=	0xffff
      000000                         49 _data::
      000000                         50 	.ds 18
                                     51 ;--------------------------------------------------------
                                     52 ; ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area _INITIALIZED
      000000                         55 _scrollpos::
      000000                         56 	.ds 1
      000001                         57 _datapos::
      000001                         58 	.ds 1
                                     59 ;--------------------------------------------------------
                                     60 ; absolute external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area _DABS (ABS)
                                     63 ;--------------------------------------------------------
                                     64 ; global & static initialisations
                                     65 ;--------------------------------------------------------
                                     66 	.area _HOME
                                     67 	.area _GSINIT
                                     68 	.area _GSFINAL
                                     69 	.area _GSINIT
                                     70 ;--------------------------------------------------------
                                     71 ; Home
                                     72 ;--------------------------------------------------------
                                     73 	.area _HOME
                                     74 	.area _HOME
                                     75 ;--------------------------------------------------------
                                     76 ; code
                                     77 ;--------------------------------------------------------
                                     78 	.area _CODE
                                     79 ;src/main.c:8: INCBIN(map_tiles, "res/map_tiles.bin")
                                     80 ;	---------------------------------
                                     81 ; Function __func_map_tiles
                                     82 ; ---------------------------------
                           000000    83 	b___func_map_tiles	= 0
      000000                         84 ___func_map_tiles::
      000000                         85 _map_tiles::
      000000                         86 1$:
      000000 FF 00 FF 00 FF 00 FF    87 	.incbin "res/map_tiles.bin" 
             00 FF 00 FF 00 DF 20
             FF 00 FF 00 FF 00 FF
             00 FF 00 3F C0 BF 00
             FF 00 FF 00 FF 00 FF
             00 FF 00 FF 00 FF 00
             FF 00 FF 00 FF 00 FF
             00 EF 10 F8 00 F0 00
             F0 00 E1 00 C5 22 F3
             0C FD 03 F8 07 78 07
             5A 25 BC 43 7C 83 FC
             03 E0 07 FF FF FF FF
             FF FF FF FF FF FF FF
             FF FF FF FF FF FF FF
             FF FF FF FF FF FF FF
             FF FF FF DF FF FF FF
             FF FF FF FF FF FF FF
             FF 3F FF BF FF FF FF
             FF FF
      000780                         88 2$:
                           000780    89 	___size_map_tiles = (2$-1$) 
                                     90 	.globl ___size_map_tiles 
                                     91 	.local b___func_map_tiles 
                           000000    92 	___bank_map_tiles = b___func_map_tiles 
                                     93 	.globl ___bank_map_tiles 
                                     94 ;src/main.c:15: INCBIN(map_compressed, "res/map.bin.rle")
                                     95 ;	---------------------------------
                                     96 ; Function __func_map_compressed
                                     97 ; ---------------------------------
                           000000    98 	b___func_map_compressed	= 0
      000780                         99 ___func_map_compressed::
      000780                        100 _map_compressed::
      000780                        101 1$:
      000780 08 00 0D 03 0F 02 02   102 	.incbin "res/map.bin.rle" 
             26 38 FC 05 0E 06 11
             05 05 1E 0D 01 0E 0C
             23 02 02 0B 16 FC 05
             78 07 12 05 05 1F 0E
             02 02 00 0D 26 2A 00
             19 08 13 06 11 4A 5D
             62 41 35 42 02 02 01
             0E 0B 2B 01 1A 09 14
             07 12 1F 0E 0C 1C 37
             23 03 0F 00 0D 02 02
             00 39 06 11 05 05 1E
             02 26 38 1E 02 04 10
             1D 0E 02 02 01 3A 07
             12 05 05 20 24 63 6A
             1F 02 05 05 1E 02 00
             0D 02 3B 06 11 4A 53
             4A 5E 64 02 03 0F 05
             05 1F
      000E45                        103 2$:
                           0006C5   104 	___size_map_compressed = (2$-1$) 
                                    105 	.globl ___size_map_compressed 
                                    106 	.local b___func_map_compressed 
                           000000   107 	___bank_map_compressed = b___func_map_compressed 
                                    108 	.globl ___bank_map_compressed 
                                    109 ;src/main.c:22: void main() {
                                    110 ;	---------------------------------
                                    111 ; Function main
                                    112 ; ---------------------------------
      000E45                        113 _main::
      000E45 DD E5            [15]  114 	push	ix
      000E47 DD 21 00 00      [14]  115 	ld	ix,#0
      000E4B DD 39            [15]  116 	add	ix,sp
      000E4D 3B               [ 6]  117 	dec	sp
                                    118 ;src/main.c:33: set_bkg_data(0, INCBIN_SIZE(map_tiles) >> 4, map_tiles);
      000E4E 11r00r00         [10]  119 	ld	de, #_map_tiles+0
      000E51 01r00r00         [10]  120 	ld	bc, #___size_map_tiles+0
      000E54 CB 38            [ 8]  121 	srl	b
      000E56 CB 19            [ 8]  122 	rr	c
      000E58 CB 38            [ 8]  123 	srl	b
      000E5A CB 19            [ 8]  124 	rr	c
      000E5C CB 38            [ 8]  125 	srl	b
      000E5E CB 19            [ 8]  126 	rr	c
      000E60 CB 38            [ 8]  127 	srl	b
      000E62 CB 19            [ 8]  128 	rr	c
                                    129 ;../../../include/sms/sms.h:534: set_tile_2bpp_data(start, ntiles, src, _current_2bpp_palette);
      000E64 2Ar00r00         [16]  130 	ld	hl, (__current_2bpp_palette)
      000E67 E5               [11]  131 	push	hl
      000E68 D5               [11]  132 	push	de
      000E69 C5               [11]  133 	push	bc
      000E6A 21 00 00         [10]  134 	ld	hl, #0x0000
      000E6D E5               [11]  135 	push	hl
      000E6E CDr00r00         [17]  136 	call	_set_tile_2bpp_data
                                    137 ;src/main.c:36: rle_init(map_compressed);
      000E71 21r80r07         [10]  138 	ld	hl, #_map_compressed
      000E74 CDr00r00         [17]  139 	call	_rle_init
                                    140 ;src/main.c:41: for (uint8_t i = 0; (i != DEVICE_SCREEN_WIDTH + 1); i++) {
      000E77 DD 36 FF 00      [19]  141 	ld	-1 (ix), #0x00
      000E7B                        142 00114$:
      000E7B DD 7E FF         [19]  143 	ld	a, -1 (ix)
      000E7E D6 15            [ 7]  144 	sub	a, #0x15
      000E80 28 2A            [12]  145 	jr	Z, 00103$
                                    146 ;src/main.c:42: rle_decompress(data, MAP_DATA_HEIGHT);
      000E82 3E 12            [ 7]  147 	ld	a, #0x12
      000E84 F5               [11]  148 	push	af
      000E85 33               [ 6]  149 	inc	sp
      000E86 21r00r00         [10]  150 	ld	hl, #_data
      000E89 E5               [11]  151 	push	hl
      000E8A CDr00r00         [17]  152 	call	_rle_decompress
                                    153 ;src/main.c:47: set_bkg_tiles(i & (DEVICE_SCREEN_BUFFER_WIDTH-1), 0, 1, MAP_DATA_HEIGHT, data);
      000E8D 01r00r00         [10]  154 	ld	bc, #_data
      000E90 DD 7E FF         [19]  155 	ld	a, -1 (ix)
      000E93 E6 1F            [ 7]  156 	and	a, #0x1f
      000E95 C5               [11]  157 	push	bc
      000E96 26 12            [ 7]  158 	ld	h, #0x12
                                    159 ;	spillPairReg hl
                                    160 ;	spillPairReg hl
      000E98 E5               [11]  161 	push	hl
      000E99 33               [ 6]  162 	inc	sp
      000E9A 26 01            [ 7]  163 	ld	h, #0x01
                                    164 ;	spillPairReg hl
                                    165 ;	spillPairReg hl
      000E9C E5               [11]  166 	push	hl
      000E9D 33               [ 6]  167 	inc	sp
      000E9E 26 00            [ 7]  168 	ld	h, #0x00
                                    169 ;	spillPairReg hl
                                    170 ;	spillPairReg hl
      000EA0 E5               [11]  171 	push	hl
      000EA1 33               [ 6]  172 	inc	sp
      000EA2 F5               [11]  173 	push	af
      000EA3 33               [ 6]  174 	inc	sp
      000EA4 CDr00r00         [17]  175 	call	_set_tile_map_compat
                                    176 ;src/main.c:41: for (uint8_t i = 0; (i != DEVICE_SCREEN_WIDTH + 1); i++) {
      000EA7 DD 34 FF         [23]  177 	inc	-1 (ix)
      000EAA 18 CF            [12]  178 	jr	00114$
      000EAC                        179 00103$:
                                    180 ;src/main.c:51: datapos = 0;
      000EAC 21r01r00         [10]  181 	ld	hl, #_datapos
      000EAF 36 00            [10]  182 	ld	(hl), #0x00
                                    183 ;src/main.c:52: scrollpos = 1;
      000EB1 21r00r00         [10]  184 	ld	hl, #_scrollpos
      000EB4 36 01            [10]  185 	ld	(hl), #0x01
                                    186 ;src/main.c:53: while(TRUE) {
      000EB6                        187 00109$:
                                    188 ;src/main.c:55: wait_vbl_done();
      000EB6 CDr00r00         [17]  189 	call	_wait_vbl_done
                                    190 ;src/main.c:60: scrollpos++;
      000EB9 21r00r00         [10]  191 	ld	hl, #_scrollpos
      000EBC 34               [11]  192 	inc	(hl)
                                    193 ;src/main.c:61: move_bkg(scrollpos, 0);
      000EBD 3Ar00r00         [13]  194 	ld	a, (_scrollpos+0)
      000EC0 4F               [ 4]  195 	ld	c, a
                                    196 ;../../../include/sms/sms.h:195: __WRITE_VDP_REG(VDP_RSCX, -x);
      000EC1 21r00r00         [10]  197 	ld	hl, #_shadow_VDP_RSCX
      000EC4 AF               [ 4]  198 	xor	a, a
      000EC5 91               [ 4]  199 	sub	a, c
      000EC6 77               [ 7]  200 	ld	(hl), a
      000EC7 ED 57            [ 9]  201 	ld	a,i
      000EC9 F3               [ 4]  202 	di
      000ECA F5               [11]  203 	push	af
      000ECB 3Ar00r00         [13]  204 	ld	a, (_shadow_VDP_RSCX+0)
      000ECE D3 BF            [11]  205 	out	(_VDP_CMD), a
      000ED0 3E 88            [ 7]  206 	ld	a, #0x88
      000ED2 D3 BF            [11]  207 	out	(_VDP_CMD), a
      000ED4 F1               [10]  208 	pop	af
      000ED5 E2rD9r0E         [10]  209 	jp	PO, 00146$
      000ED8 FB               [ 4]  210 	ei
      000ED9                        211 00146$:
                                    212 ;../../../include/sms/sms.h:196: __WRITE_VDP_REG(VDP_RSCY, y);
      000ED9 21r00r00         [10]  213 	ld	hl, #_shadow_VDP_RSCY
      000EDC 36 00            [10]  214 	ld	(hl), #0x00
      000EDE ED 57            [ 9]  215 	ld	a,i
      000EE0 F3               [ 4]  216 	di
      000EE1 F5               [11]  217 	push	af
      000EE2 3E 00            [ 7]  218 	ld	a, #0x00
      000EE4 D3 BF            [11]  219 	out	(_VDP_CMD), a
      000EE6 3E 89            [ 7]  220 	ld	a, #0x89
      000EE8 D3 BF            [11]  221 	out	(_VDP_CMD), a
      000EEA F1               [10]  222 	pop	af
      000EEB E2rEFr0E         [10]  223 	jp	PO, 00148$
      000EEE FB               [ 4]  224 	ei
      000EEF                        225 00148$:
                                    226 ;src/main.c:65: if ((scrollpos & 0x07u) == 0) {
      000EEF 79               [ 4]  227 	ld	a, c
      000EF0 E6 07            [ 7]  228 	and	a, #0x07
      000EF2 20 C2            [12]  229 	jr	NZ, 00109$
                                    230 ;src/main.c:69: datapos = (scrollpos >> 3);
      000EF4 3Ar00r00         [13]  231 	ld	a, (_scrollpos+0)
      000EF7 0F               [ 4]  232 	rrca
      000EF8 0F               [ 4]  233 	rrca
      000EF9 0F               [ 4]  234 	rrca
      000EFA E6 1F            [ 7]  235 	and	a, #0x1f
      000EFC 32r01r00         [13]  236 	ld	(_datapos+0), a
                                    237 ;src/main.c:70: uint8_t map_x_column = (datapos + DEVICE_SCREEN_WIDTH) & (DEVICE_SCREEN_BUFFER_WIDTH-1);
      000EFF 3Ar01r00         [13]  238 	ld	a, (_datapos+0)
      000F02 C6 14            [ 7]  239 	add	a, #0x14
      000F04 E6 1F            [ 7]  240 	and	a, #0x1f
      000F06 DD 77 FF         [19]  241 	ld	-1 (ix), a
                                    242 ;src/main.c:75: if (!rle_decompress(data, MAP_DATA_HEIGHT)) {
      000F09 3E 12            [ 7]  243 	ld	a, #0x12
      000F0B F5               [11]  244 	push	af
      000F0C 33               [ 6]  245 	inc	sp
      000F0D 21r00r00         [10]  246 	ld	hl, #_data
      000F10 E5               [11]  247 	push	hl
      000F11 CDr00r00         [17]  248 	call	_rle_decompress
      000F14 7D               [ 4]  249 	ld	a, l
      000F15 B7               [ 4]  250 	or	a, a
      000F16 20 11            [12]  251 	jr	NZ, 00105$
                                    252 ;src/main.c:76: rle_init(map_compressed);
      000F18 21r80r07         [10]  253 	ld	hl, #_map_compressed
      000F1B CDr00r00         [17]  254 	call	_rle_init
                                    255 ;src/main.c:77: rle_decompress(data, MAP_DATA_HEIGHT);
      000F1E 3E 12            [ 7]  256 	ld	a, #0x12
      000F20 F5               [11]  257 	push	af
      000F21 33               [ 6]  258 	inc	sp
      000F22 21r00r00         [10]  259 	ld	hl, #_data
      000F25 E5               [11]  260 	push	hl
      000F26 CDr00r00         [17]  261 	call	_rle_decompress
      000F29                        262 00105$:
                                    263 ;src/main.c:83: set_bkg_tiles(map_x_column, 0, 1, MAP_DATA_HEIGHT, data);
      000F29 21r00r00         [10]  264 	ld	hl, #_data
      000F2C E5               [11]  265 	push	hl
      000F2D 21 01 12         [10]  266 	ld	hl, #0x1201
      000F30 E5               [11]  267 	push	hl
      000F31 AF               [ 4]  268 	xor	a, a
      000F32 F5               [11]  269 	push	af
      000F33 33               [ 6]  270 	inc	sp
      000F34 DD 7E FF         [19]  271 	ld	a, -1 (ix)
      000F37 F5               [11]  272 	push	af
      000F38 33               [ 6]  273 	inc	sp
      000F39 CDr00r00         [17]  274 	call	_set_tile_map_compat
      000F3C C3rB6r0E         [10]  275 	jp	00109$
                                    276 ;src/main.c:86: }
      000F3F 33               [ 6]  277 	inc	sp
      000F40 DD E1            [14]  278 	pop	ix
      000F42 C9               [10]  279 	ret
                                    280 	.area _CODE
                                    281 	.area _INITIALIZER
      000000                        282 __xinit__scrollpos:
      000000 00                     283 	.db #0x00	; 0
      000001                        284 __xinit__datapos:
      000001 00                     285 	.db #0x00	; 0
                                    286 	.area _CABS (ABS)
